// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2019 22:24:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    four_line_to_sixteen_line_decimal_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module four_line_to_sixteen_line_decimal_decoder_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module four_line_to_sixteen_line_decimal_decoder_vlg_check_tst (
	Y0,
	Y1,
	Y2,
	Y3,
	Y4,
	Y5,
	Y6,
	Y7,
	Y8,
	Y9,
	Y10,
	Y11,
	Y12,
	Y13,
	Y14,
	Y15,
	sampler_rx
);
input  Y0;
input  Y1;
input  Y2;
input  Y3;
input  Y4;
input  Y5;
input  Y6;
input  Y7;
input  Y8;
input  Y9;
input  Y10;
input  Y11;
input  Y12;
input  Y13;
input  Y14;
input  Y15;
input sampler_rx;

reg  Y0_expected;
reg  Y1_expected;
reg  Y2_expected;
reg  Y3_expected;
reg  Y4_expected;
reg  Y5_expected;
reg  Y6_expected;
reg  Y7_expected;
reg  Y8_expected;
reg  Y9_expected;
reg  Y10_expected;
reg  Y11_expected;
reg  Y12_expected;
reg  Y13_expected;
reg  Y14_expected;
reg  Y15_expected;

reg  Y0_prev;
reg  Y1_prev;
reg  Y2_prev;
reg  Y3_prev;
reg  Y4_prev;
reg  Y5_prev;
reg  Y6_prev;
reg  Y7_prev;
reg  Y8_prev;
reg  Y9_prev;
reg  Y10_prev;
reg  Y11_prev;
reg  Y12_prev;
reg  Y13_prev;
reg  Y14_prev;
reg  Y15_prev;

reg  Y0_expected_prev;
reg  Y1_expected_prev;
reg  Y2_expected_prev;
reg  Y3_expected_prev;
reg  Y4_expected_prev;
reg  Y5_expected_prev;
reg  Y6_expected_prev;
reg  Y7_expected_prev;
reg  Y8_expected_prev;
reg  Y9_expected_prev;
reg  Y10_expected_prev;
reg  Y11_expected_prev;
reg  Y12_expected_prev;
reg  Y13_expected_prev;
reg  Y14_expected_prev;
reg  Y15_expected_prev;

reg  last_Y0_exp;
reg  last_Y1_exp;
reg  last_Y2_exp;
reg  last_Y3_exp;
reg  last_Y4_exp;
reg  last_Y5_exp;
reg  last_Y6_exp;
reg  last_Y7_exp;
reg  last_Y8_exp;
reg  last_Y9_exp;
reg  last_Y10_exp;
reg  last_Y11_exp;
reg  last_Y12_exp;
reg  last_Y13_exp;
reg  last_Y14_exp;
reg  last_Y15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	Y0_prev = Y0;
	Y1_prev = Y1;
	Y2_prev = Y2;
	Y3_prev = Y3;
	Y4_prev = Y4;
	Y5_prev = Y5;
	Y6_prev = Y6;
	Y7_prev = Y7;
	Y8_prev = Y8;
	Y9_prev = Y9;
	Y10_prev = Y10;
	Y11_prev = Y11;
	Y12_prev = Y12;
	Y13_prev = Y13;
	Y14_prev = Y14;
	Y15_prev = Y15;
end

// update expected /o prevs

always @(trigger)
begin
	Y0_expected_prev = Y0_expected;
	Y1_expected_prev = Y1_expected;
	Y2_expected_prev = Y2_expected;
	Y3_expected_prev = Y3_expected;
	Y4_expected_prev = Y4_expected;
	Y5_expected_prev = Y5_expected;
	Y6_expected_prev = Y6_expected;
	Y7_expected_prev = Y7_expected;
	Y8_expected_prev = Y8_expected;
	Y9_expected_prev = Y9_expected;
	Y10_expected_prev = Y10_expected;
	Y11_expected_prev = Y11_expected;
	Y12_expected_prev = Y12_expected;
	Y13_expected_prev = Y13_expected;
	Y14_expected_prev = Y14_expected;
	Y15_expected_prev = Y15_expected;
end



// expected Y0
initial
begin
	Y0_expected = 1'bX;
	Y0_expected = #999000 1'b0;
end 

// expected Y1
initial
begin
	Y1_expected = 1'bX;
	Y1_expected = #999000 1'b0;
end 

// expected Y2
initial
begin
	Y2_expected = 1'bX;
	Y2_expected = #999000 1'b0;
end 

// expected Y3
initial
begin
	Y3_expected = 1'bX;
	Y3_expected = #999000 1'b0;
end 

// expected Y4
initial
begin
	Y4_expected = 1'bX;
	Y4_expected = #999000 1'b0;
end 

// expected Y5
initial
begin
	Y5_expected = 1'bX;
	Y5_expected = #999000 1'b0;
end 

// expected Y6
initial
begin
	Y6_expected = 1'bX;
	Y6_expected = #999000 1'b0;
end 

// expected Y7
initial
begin
	Y7_expected = 1'bX;
	Y7_expected = #999000 1'b0;
end 

// expected Y8
initial
begin
	Y8_expected = 1'bX;
	Y8_expected = #999000 1'b0;
end 

// expected Y9
initial
begin
	Y9_expected = 1'bX;
	Y9_expected = #999000 1'b0;
end 

// expected Y10
initial
begin
	Y10_expected = 1'bX;
	Y10_expected = #999000 1'b0;
end 

// expected Y11
initial
begin
	Y11_expected = 1'bX;
	Y11_expected = #999000 1'b0;
end 

// expected Y12
initial
begin
	Y12_expected = 1'bX;
	Y12_expected = #999000 1'b0;
end 

// expected Y13
initial
begin
	Y13_expected = 1'bX;
	Y13_expected = #999000 1'b0;
end 

// expected Y14
initial
begin
	Y14_expected = 1'bX;
	Y14_expected = #999000 1'b0;
end 

// expected Y15
initial
begin
	Y15_expected = 1'bX;
	Y15_expected = #999000 1'b0;
end 
// generate trigger
always @(Y0_expected or Y0 or Y1_expected or Y1 or Y2_expected or Y2 or Y3_expected or Y3 or Y4_expected or Y4 or Y5_expected or Y5 or Y6_expected or Y6 or Y7_expected or Y7 or Y8_expected or Y8 or Y9_expected or Y9 or Y10_expected or Y10 or Y11_expected or Y11 or Y12_expected or Y12 or Y13_expected or Y13 or Y14_expected or Y14 or Y15_expected or Y15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Y0 = %b | expected Y1 = %b | expected Y2 = %b | expected Y3 = %b | expected Y4 = %b | expected Y5 = %b | expected Y6 = %b | expected Y7 = %b | expected Y8 = %b | expected Y9 = %b | expected Y10 = %b | expected Y11 = %b | expected Y12 = %b | expected Y13 = %b | expected Y14 = %b | expected Y15 = %b | ",Y0_expected_prev,Y1_expected_prev,Y2_expected_prev,Y3_expected_prev,Y4_expected_prev,Y5_expected_prev,Y6_expected_prev,Y7_expected_prev,Y8_expected_prev,Y9_expected_prev,Y10_expected_prev,Y11_expected_prev,Y12_expected_prev,Y13_expected_prev,Y14_expected_prev,Y15_expected_prev);
	$display("| real Y0 = %b | real Y1 = %b | real Y2 = %b | real Y3 = %b | real Y4 = %b | real Y5 = %b | real Y6 = %b | real Y7 = %b | real Y8 = %b | real Y9 = %b | real Y10 = %b | real Y11 = %b | real Y12 = %b | real Y13 = %b | real Y14 = %b | real Y15 = %b | ",Y0_prev,Y1_prev,Y2_prev,Y3_prev,Y4_prev,Y5_prev,Y6_prev,Y7_prev,Y8_prev,Y9_prev,Y10_prev,Y11_prev,Y12_prev,Y13_prev,Y14_prev,Y15_prev);
`endif
	if (
		( Y0_expected_prev !== 1'bx ) && ( Y0_prev !== Y0_expected_prev )
		&& ((Y0_expected_prev !== last_Y0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y0_expected_prev);
		$display ("     Real value = %b", Y0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y0_exp = Y0_expected_prev;
	end
	if (
		( Y1_expected_prev !== 1'bx ) && ( Y1_prev !== Y1_expected_prev )
		&& ((Y1_expected_prev !== last_Y1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Y1_exp = Y1_expected_prev;
	end
	if (
		( Y2_expected_prev !== 1'bx ) && ( Y2_prev !== Y2_expected_prev )
		&& ((Y2_expected_prev !== last_Y2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y2_exp = Y2_expected_prev;
	end
	if (
		( Y3_expected_prev !== 1'bx ) && ( Y3_prev !== Y3_expected_prev )
		&& ((Y3_expected_prev !== last_Y3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y3_expected_prev);
		$display ("     Real value = %b", Y3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Y3_exp = Y3_expected_prev;
	end
	if (
		( Y4_expected_prev !== 1'bx ) && ( Y4_prev !== Y4_expected_prev )
		&& ((Y4_expected_prev !== last_Y4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y4_expected_prev);
		$display ("     Real value = %b", Y4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Y4_exp = Y4_expected_prev;
	end
	if (
		( Y5_expected_prev !== 1'bx ) && ( Y5_prev !== Y5_expected_prev )
		&& ((Y5_expected_prev !== last_Y5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y5_expected_prev);
		$display ("     Real value = %b", Y5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Y5_exp = Y5_expected_prev;
	end
	if (
		( Y6_expected_prev !== 1'bx ) && ( Y6_prev !== Y6_expected_prev )
		&& ((Y6_expected_prev !== last_Y6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y6_expected_prev);
		$display ("     Real value = %b", Y6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Y6_exp = Y6_expected_prev;
	end
	if (
		( Y7_expected_prev !== 1'bx ) && ( Y7_prev !== Y7_expected_prev )
		&& ((Y7_expected_prev !== last_Y7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y7_expected_prev);
		$display ("     Real value = %b", Y7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Y7_exp = Y7_expected_prev;
	end
	if (
		( Y8_expected_prev !== 1'bx ) && ( Y8_prev !== Y8_expected_prev )
		&& ((Y8_expected_prev !== last_Y8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y8_expected_prev);
		$display ("     Real value = %b", Y8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y8_exp = Y8_expected_prev;
	end
	if (
		( Y9_expected_prev !== 1'bx ) && ( Y9_prev !== Y9_expected_prev )
		&& ((Y9_expected_prev !== last_Y9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y9_expected_prev);
		$display ("     Real value = %b", Y9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Y9_exp = Y9_expected_prev;
	end
	if (
		( Y10_expected_prev !== 1'bx ) && ( Y10_prev !== Y10_expected_prev )
		&& ((Y10_expected_prev !== last_Y10_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y10_expected_prev);
		$display ("     Real value = %b", Y10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Y10_exp = Y10_expected_prev;
	end
	if (
		( Y11_expected_prev !== 1'bx ) && ( Y11_prev !== Y11_expected_prev )
		&& ((Y11_expected_prev !== last_Y11_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y11_expected_prev);
		$display ("     Real value = %b", Y11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Y11_exp = Y11_expected_prev;
	end
	if (
		( Y12_expected_prev !== 1'bx ) && ( Y12_prev !== Y12_expected_prev )
		&& ((Y12_expected_prev !== last_Y12_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y12_expected_prev);
		$display ("     Real value = %b", Y12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Y12_exp = Y12_expected_prev;
	end
	if (
		( Y13_expected_prev !== 1'bx ) && ( Y13_prev !== Y13_expected_prev )
		&& ((Y13_expected_prev !== last_Y13_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y13_expected_prev);
		$display ("     Real value = %b", Y13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_Y13_exp = Y13_expected_prev;
	end
	if (
		( Y14_expected_prev !== 1'bx ) && ( Y14_prev !== Y14_expected_prev )
		&& ((Y14_expected_prev !== last_Y14_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y14_expected_prev);
		$display ("     Real value = %b", Y14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Y14_exp = Y14_expected_prev;
	end
	if (
		( Y15_expected_prev !== 1'bx ) && ( Y15_prev !== Y15_expected_prev )
		&& ((Y15_expected_prev !== last_Y15_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y15_expected_prev);
		$display ("     Real value = %b", Y15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Y15_exp = Y15_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module four_line_to_sixteen_line_decimal_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire Y0;
wire Y1;
wire Y2;
wire Y3;
wire Y4;
wire Y5;
wire Y6;
wire Y7;
wire Y8;
wire Y9;
wire Y10;
wire Y11;
wire Y12;
wire Y13;
wire Y14;
wire Y15;

wire sampler;                             

// assign statements (if any)                          
four_line_to_sixteen_line_decimal_decoder i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.Y0(Y0),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4),
	.Y5(Y5),
	.Y6(Y6),
	.Y7(Y7),
	.Y8(Y8),
	.Y9(Y9),
	.Y10(Y10),
	.Y11(Y11),
	.Y12(Y12),
	.Y13(Y13),
	.Y14(Y14),
	.Y15(Y15)
);

// A
always
begin
	A = 1'b0;
	A = #1000000 1'b1;
	#1000000;
end 

// B
initial
begin
	B = 1'b1;
	B = #2000000 1'b0;
	B = #4000000 1'b1;
end 

// C
initial
begin
	C = 1'b0;
	C = #2000000 1'b1;
	C = #2000000 1'b0;
	C = #4000000 1'b1;
end 

// D
initial
begin
	D = 1'b0;
	D = #4000000 1'b1;
end 

four_line_to_sixteen_line_decimal_decoder_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

four_line_to_sixteen_line_decimal_decoder_vlg_check_tst tb_out(
	.Y0(Y0),
	.Y1(Y1),
	.Y2(Y2),
	.Y3(Y3),
	.Y4(Y4),
	.Y5(Y5),
	.Y6(Y6),
	.Y7(Y7),
	.Y8(Y8),
	.Y9(Y9),
	.Y10(Y10),
	.Y11(Y11),
	.Y12(Y12),
	.Y13(Y13),
	.Y14(Y14),
	.Y15(Y15),
	.sampler_rx(sampler)
);
endmodule

