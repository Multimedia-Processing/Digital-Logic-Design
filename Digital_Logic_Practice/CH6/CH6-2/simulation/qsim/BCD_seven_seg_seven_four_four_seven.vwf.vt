// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/16/2020 21:51:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BCD_seven_seg_seven_four_four_seven
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCD_seven_seg_seven_four_four_seven_vlg_sample_tst(
	A,
	B,
	BI_RBO,
	C,
	D,
	LT,
	RBI,
	sampler_tx
);
input  A;
input  B;
input  BI_RBO;
input  C;
input  D;
input  LT;
input  RBI;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or BI_RBO or C or D or LT or RBI)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BCD_seven_seg_seven_four_four_seven_vlg_check_tst (
	OA,
	OB,
	OC,
	OD,
	OE,
	OF,
	OG,
	OP,
	sampler_rx
);
input  OA;
input  OB;
input  OC;
input  OD;
input  OE;
input  OF;
input  OG;
input  OP;
input sampler_rx;

reg  OA_expected;
reg  OB_expected;
reg  OC_expected;
reg  OD_expected;
reg  OE_expected;
reg  OF_expected;
reg  OG_expected;
reg  OP_expected;

reg  OA_prev;
reg  OB_prev;
reg  OC_prev;
reg  OD_prev;
reg  OE_prev;
reg  OF_prev;
reg  OG_prev;
reg  OP_prev;

reg  OA_expected_prev;
reg  OB_expected_prev;
reg  OC_expected_prev;
reg  OD_expected_prev;
reg  OE_expected_prev;
reg  OF_expected_prev;
reg  OG_expected_prev;
reg  OP_expected_prev;

reg  last_OA_exp;
reg  last_OB_exp;
reg  last_OC_exp;
reg  last_OD_exp;
reg  last_OE_exp;
reg  last_OF_exp;
reg  last_OG_exp;
reg  last_OP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	OA_prev = OA;
	OB_prev = OB;
	OC_prev = OC;
	OD_prev = OD;
	OE_prev = OE;
	OF_prev = OF;
	OG_prev = OG;
	OP_prev = OP;
end

// update expected /o prevs

always @(trigger)
begin
	OA_expected_prev = OA_expected;
	OB_expected_prev = OB_expected;
	OC_expected_prev = OC_expected;
	OD_expected_prev = OD_expected;
	OE_expected_prev = OE_expected;
	OF_expected_prev = OF_expected;
	OG_expected_prev = OG_expected;
	OP_expected_prev = OP_expected;
end



// expected OA
initial
begin
	OA_expected = 1'bX;
	OA_expected = #999000 1'b0;
end 

// expected OB
initial
begin
	OB_expected = 1'bX;
	OB_expected = #999000 1'b0;
end 

// expected OC
initial
begin
	OC_expected = 1'bX;
	OC_expected = #999000 1'b0;
end 

// expected OD
initial
begin
	OD_expected = 1'bX;
	OD_expected = #999000 1'b0;
end 

// expected OE
initial
begin
	OE_expected = 1'bX;
	OE_expected = #999000 1'b0;
end 

// expected OF
initial
begin
	OF_expected = 1'bX;
	OF_expected = #999000 1'b0;
end 

// expected OG
initial
begin
	OG_expected = 1'bX;
	OG_expected = #999000 1'b0;
end 

// expected OP
initial
begin
	OP_expected = 1'bX;
	OP_expected = #999000 1'b0;
end 
// generate trigger
always @(OA_expected or OA or OB_expected or OB or OC_expected or OC or OD_expected or OD or OE_expected or OE or OF_expected or OF or OG_expected or OG or OP_expected or OP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OA = %b | expected OB = %b | expected OC = %b | expected OD = %b | expected OE = %b | expected OF = %b | expected OG = %b | expected OP = %b | ",OA_expected_prev,OB_expected_prev,OC_expected_prev,OD_expected_prev,OE_expected_prev,OF_expected_prev,OG_expected_prev,OP_expected_prev);
	$display("| real OA = %b | real OB = %b | real OC = %b | real OD = %b | real OE = %b | real OF = %b | real OG = %b | real OP = %b | ",OA_prev,OB_prev,OC_prev,OD_prev,OE_prev,OF_prev,OG_prev,OP_prev);
`endif
	if (
		( OA_expected_prev !== 1'bx ) && ( OA_prev !== OA_expected_prev )
		&& ((OA_expected_prev !== last_OA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OA_exp = OA_expected_prev;
	end
	if (
		( OB_expected_prev !== 1'bx ) && ( OB_prev !== OB_expected_prev )
		&& ((OB_expected_prev !== last_OB_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OB_exp = OB_expected_prev;
	end
	if (
		( OC_expected_prev !== 1'bx ) && ( OC_prev !== OC_expected_prev )
		&& ((OC_expected_prev !== last_OC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OC_expected_prev);
		$display ("     Real value = %b", OC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OC_exp = OC_expected_prev;
	end
	if (
		( OD_expected_prev !== 1'bx ) && ( OD_prev !== OD_expected_prev )
		&& ((OD_expected_prev !== last_OD_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OD_expected_prev);
		$display ("     Real value = %b", OD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OD_exp = OD_expected_prev;
	end
	if (
		( OE_expected_prev !== 1'bx ) && ( OE_prev !== OE_expected_prev )
		&& ((OE_expected_prev !== last_OE_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OE_exp = OE_expected_prev;
	end
	if (
		( OF_expected_prev !== 1'bx ) && ( OF_prev !== OF_expected_prev )
		&& ((OF_expected_prev !== last_OF_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OF_expected_prev);
		$display ("     Real value = %b", OF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OF_exp = OF_expected_prev;
	end
	if (
		( OG_expected_prev !== 1'bx ) && ( OG_prev !== OG_expected_prev )
		&& ((OG_expected_prev !== last_OG_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OG_expected_prev);
		$display ("     Real value = %b", OG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OG_exp = OG_expected_prev;
	end
	if (
		( OP_expected_prev !== 1'bx ) && ( OP_prev !== OP_expected_prev )
		&& ((OP_expected_prev !== last_OP_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OP_exp = OP_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#13000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BCD_seven_seg_seven_four_four_seven_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg BI_RBO;
reg C;
reg D;
reg LT;
reg RBI;
// wires                                               
wire OA;
wire OB;
wire OC;
wire OD;
wire OE;
wire OF;
wire OG;
wire OP;

wire sampler;                             

// assign statements (if any)                          
BCD_seven_seg_seven_four_four_seven i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.BI_RBO(BI_RBO),
	.C(C),
	.D(D),
	.LT(LT),
	.OA(OA),
	.OB(OB),
	.OC(OC),
	.OD(OD),
	.OE(OE),
	.OF(OF),
	.OG(OG),
	.OP(OP),
	.RBI(RBI)
);

// BI_RBO
initial
begin
	BI_RBO = 1'b1;
	BI_RBO = #10000000 1'b0;
	BI_RBO = #1000000 1'b1;
end 

// RBI
initial
begin
	RBI = 1'b1;
	RBI = #10000000 1'bX;
	RBI = #2000000 1'b0;
end 

// LT
initial
begin
	LT = 1'b1;
	LT = #11000000 1'b0;
	LT = #1000000 1'b1;
end 

// D
initial
begin
	D = 1'b0;
	D = #8000000 1'b1;
	D = #2000000 1'bX;
	D = #2000000 1'b0;
end 

// C
initial
begin
	C = 1'b0;
	C = #4000000 1'b1;
	C = #4000000 1'b0;
	C = #2000000 1'bX;
	C = #2000000 1'b0;
end 

// B
initial
begin
	B = 1'b0;
	B = #2000000 1'b1;
	B = #2000000 1'b0;
	B = #2000000 1'b1;
	B = #2000000 1'b0;
	B = #2000000 1'bX;
	B = #2000000 1'b0;
end 

// A
initial
begin
	repeat(5)
	begin
		A = 1'b0;
		A = #1000000 1'b1;
		# 1000000;
	end
	A = 1'bX;
	A = #2000000 1'b0;
end 

BCD_seven_seg_seven_four_four_seven_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.BI_RBO(BI_RBO),
	.C(C),
	.D(D),
	.LT(LT),
	.RBI(RBI),
	.sampler_tx(sampler)
);

BCD_seven_seg_seven_four_four_seven_vlg_check_tst tb_out(
	.OA(OA),
	.OB(OB),
	.OC(OC),
	.OD(OD),
	.OE(OE),
	.OF(OF),
	.OG(OG),
	.OP(OP),
	.sampler_rx(sampler)
);
endmodule

